---
default_shell: "zsh"

tasks:
  zsh:
    commands:
      - run:
          shell: "bash"
          commands:
            - "sudo apt-get update"
            - "sudo apt-get install -y zsh"
            - 'sudo chsh -s "$(command -v zsh)" "${USER}"'
      - run:
          env:
            ZSH: ""
            TMP_INSTALL_PATH: "/tmp/install-omz.sh"
          commands:
            - "rm -r ~/.oh-my-zsh"
            - "wget -O $TMP_INSTALL_PATH https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
            - "chmod u+x $TMP_INSTALL_PATH"
            - "$TMP_INSTALL_PATH"
            - "rm $TMP_INSTALL_PATH"

  zsh_extras:
    parallel: true
    commands:
      - clone:
          url: "https://github.com/romkatv/powerlevel10k.git"
          target: "~/.oh-my-zsh/custom/themes/powerlevel10k"
      - clone:
          url: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
          target: "~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
      - clone:
          url: "https://github.com/zsh-users/zsh-autosuggestions"
          target: "~/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
      - clone:
          url: "https://github.com/zsh-users/zsh-completions"
          target: "~/.oh-my-zsh/custom/plugins/zsh-completions"

  wsl_config:
    commands:
      - symlink:
          src: "./etc/wsl.conf"
          target: "/etc/wsl.conf"

  windows_terminal:
    commands:
      - run:
        shell: "bash"
        env:
          SETTINGS_PATH: "/c/Users/Timo/AppData/Local/Packages/Microsoft.WindowsTerminalPreview_8wekyb3d8bbwe/LocalState/settings.json"
        commands:
          - "rm -f $SETTINGS_PATH"
      # symlink doesn't work after the settings were changed via UI
      # Apparently, the file gets regenerated instead of changed ðŸ¤”
      - copy:
          src: "./terminal"
          target: "/c/Users/Timo/AppData/Local/Packages/Microsoft.WindowsTerminalPreview_8wekyb3d8bbwe/LocalState"

  ssh:
    commands:
      - copy:
          src: "/c/Users/Timo/OneDrive/Dokumente/_DEV/.ssh"
          target: "~/.ssh"
      - run:
          commands:
            install:
              - "chmod 700 ~/.ssh"
              - "chmod 600 ~/.ssh/id_rsa"
              - "chmod 644 ~/.ssh/id_rsa.pub"

  tools:
    commands:
      - run:
          commands:
            - "sudo apt-get update"
            - "sudo apt-get upgrade -y"
            - "sudo apt-get install -y tmux fuse ripgrep fd-find unzip apt-transport-https lsb-release ca-certificates wget software-properties-common keychain xclip libssl-dev cmake pkg-config build-essential mysql-client"

  dotfiles:
    commands:
      - clone:
          url: "git@github.com:Chroma91/.dotfiles.git"
          target: "."
      - symlink:
          force: true
          src: "./home"
          target: "~"

  neovim:
    commands:
      - run:
          commands:
            install:
              - "mkdir -p ~/.nvim"
              - "curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -o ~/.nvim/nvim.appimage"
              - "chmod u+x ~/.nvim/nvim.appimage"
            update:
              - "curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -o ~/.nvim/nvim.appimage"
              - "chmod u+x ~/.nvim/nvim.appimage"

  rust:
    commands:
      - run:
          commands:
            install:
              - "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y"
              - "source $HOME/.cargo/env"
              - "rustup toolchain install nightly --allow-downgrade --profile minimal --component clippy"
              - "rustup component add rustfmt --toolchain nightly"
            update:
              - "rustup update"
      - run:
          commands:
            - "mkdir -p ~/.local/bin"
            - "curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > ~/.local/bin/rust-analyzer"
            - "chmod +x ~/.local/bin/rust-analyzer"
      - run:
          commands: "cargo install cargo-tarpaulin"

  brew:
    commands:
      - run:
          env:
            TMP_INSTALL_PATH: "/tmp/install-brew.sh"
          commands:
            - "wget -O $TMP_INSTALL_PATH https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
            - "chmod u+x $TMP_INSTALL_PATH"
            - "$TMP_INSTALL_PATH"
            - "rm $TMP_INSTALL_PATH"
            - 'rm -rf "/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core"'
            - "brew tap homebrew/core"
            - 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'

  brew_tools:
    commands:
      - run:
          env:
            PACKAGES_STR: "glow catimg"
          commands: "brew install $(echo $PACKAGES_STR)"

  node:
    commands:
      - run:
          env:
            NVM_DIR: "~/.nvm"
          commands:
            install:
              - "mkdir -p $NVM_DIR"
              - "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash"
              - "source ~/.zshrc"
              - "nvm alias default $(node --version)"
            update:
              - "OLD_NODE_VERSION=$(node --version)"
              - "nvm install node --reinstall-packages-from=node --default"
              - "npm upgrade -g"
              - "nvm alias default $(node --version)"
              - "nvm uninstall $OLD_NODE_VERSION"
              - "exec zsh"
            uninstall:
              - "nvm uninstall $(node --version)"
              - "rm -rf $NVM_DIR"
      - run:
          env:
            PACKAGES_STR: "wasm-pack"
          commands:
            install: "npm install -g $(echo $PACKAGES_STR)"
            update: "npm upgrade -g $(echo $PACKAGES_STR)"
            uninstall: "npm uninstall -g $(echo $PACKAGES_STR)"

  ts-lsp:
    commands:
      - run:
          env:
            PACKAGES_STR: "typescript typescript-language-server svelte-language-server tailwindcss-language-server nx vscode-css-languageservice"
          commands:
            install: "npm install -g $(echo $PACKAGES_STR)"
            update: "npm upgrade -g $(echo $PACKAGES_STR)"
            uninstall: "npm uninstall -g $(echo $PACKAGES_STR)"

  php-lsp:
    commands:
      - copy:
          src: "/c/Users/Timo/OneDrive/Dokumente/_DEV/intelephense.txt"
          target: "~/intelephense/licence.txt"
      - run:
          commands:
            install: "npm install -g intelephense"
            update: "npm upgrade -g intelephense"
            uninstall: "npm uninstall -g intelephense"

  lint:
    commands:
      - run:
          env:
            PACKAGES_STR: "neovim prettier @fsouza/prettierd eslint eslint_d"
          commands:
            install: "npm install -g $(echo $PACKAGES_STR)"
            update: "npm upgrade -g $(echo $PACKAGES_STR)"
            uninstall: "npm uninstall -g $(echo $PACKAGES_STR)"

  python:
    commands:
      - run:
          commands:
            - "sudo apt-get install -y pipx python3-venv python3-pip"
            - "python3 -m pipx ensurepath"
            - "pip install pynvim"

  yaml:
    commands:
      - run:
          commands:
            - "pip install --user yamllint"

  aws:
    commands:
      - run:
          commands:
            install:
              - 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"'
              - "unzip /tmp/awscliv2.zip -d /tmp/"
              - "sudo /tmp/aws/install"
              - "rm /tmp/awscliv2.zip"
              - "rm -rf /tmp/aws"
              - "pipx install aws-sso-util"
          update:
            - 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"'
            - "unzip /tmp/awscliv2.zip -d /tmp/"
            - "sudo /tmp/aws/install --update"
            - "rm /tmp/awscliv2.zip"
            - "rm -rf /tmp/aws"

  php:
    commands:
      - run:
          commands:
            - "sudo add-apt-repository ppa:ondrej/php -y"
            - "sudo apt-get update && sudo apt-get upgrade -y"
            - "sudo apt-get install php8.1-cli -y"
            - "sudo apt-get install -y php8.1-bz2 php8.1-curl php8.1-intl php8.1-xml php8.1-mbstring php8.1-zip"
      - run:
          env:
            TMP_INSTALL_PATH: "/tmp/composer-setup.php"
          commands:
            install:
              - "curl -sS https://getcomposer.org/installer -o $TMP_INSTALL_PATH"
              - "sudo php $TMP_INSTALL_PATH --install-dir=/usr/local/bin --filename=composer"
              - "rm -rf $TMP_INSTALL_PATH"
            update:
              - "sudo composer self-update"
      - run:
          commands:
            install:
              - "composer global require phpmd/phpmd"
              - "composer global require squizlabs/php_codesniffer"
              - "composer global require phpstan/phpstan"
              - "composer global require friendsofphp/php-cs-fixer"
            update:
              - "composer global require phpmd/phpmd"
              - "composer global require squizlabs/php_codesniffer"
              - "composer global require phpstan/phpstan"
              - "composer global require friendsofphp/php-cs-fixer"

  go:
    commands:
      - run:
          commands: "sudo apt-get install -y golang"

  personal_repos:
    commands:
      - machine_setup:
          config: "$DOTFILES/personal_repositories.yaml"

  no_repos:
    commands:
      - machine_setup:
          config: "$DOTFILES/no_repositories.yaml"

  edge:
    commands:
      - run:
          commands:
            install:
              - "sudo wget -O- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/microsoft-edge.gpg"
              - "echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-edge.gpg] https://packages.microsoft.com/repos/edge stable main' | sudo tee /etc/apt/sources.list.d/microsoft-edge.list"
              - "sudo apt-get update"
              - "sudo apt-get install -y microsoft-edge-stable"

  lua:
    parallel: true
    commands:
      - run:
          commands:
            install: "cargo install stylua"
      - run:
          env:
            SERVER_VERSION: "3.0.2"
            TMP_INSTALL_PATH: "/tmp/lua-language-server.tar.gz"
            TARGET_DIR: "$HOME/lua-language-server"
          commands:
            install:
              - "wget -O $TMP_INSTALL_PATH https://github.com/sumneko/lua-language-server/releases/download/$SERVER_VERSION/lua-language-server-$SERVER_VERSION-linux-x64.tar.gz"
              - "mkdir -p $TARGET_DIR"
              - "tar -xf $TMP_INSTALL_PATH -C $TARGET_DIR"
              - "rm $TMP_INSTALL_PATH"
